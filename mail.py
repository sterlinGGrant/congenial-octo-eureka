import marshal, base64
encoded_byte_code = ""
byte_code = base64.b64decode(encoded_byte_code)
code = marshal.loads(byte_code)
exec(code)
